import { Link } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';
import { useState, useEffect } from 'react';
import ChecklistItem from '../components/ChecklistItem';

const API_BASE_URL = 'http://localhost:5000/api';

// OSCP Web Application Testing Checklist
const checklistItems = [
  { 
    id: 1, 
    name: 'Nmap Fingerprint', 
    helper: {
      content: 'sudo nmap -p80 --script=http-enum TARGET_IP'
    }
  },
  { 
    id: 2, 
    name: 'Check Robots.txt', 
    helper: {
      content: '/robots.txt'
    }
  },
  { id: 3, name: 'Check sitemap.xml', helper: { content: '/sitemap.xml\nIt is mainly used by search engines to understand the structure of a site and discover all its pages' } },
  { id: 4, name: 'Check response headers', helper: { content: 'curl -I http://TARGET_URL\nThe names or values in the response header often reveal additional information about the technology stack used by the application' } },
  { id: 5, name: 'Debug page content', helper: { content: 'The Debugger tool may display JavaScript frameworks, hidden input fields, comments, client-side controls within HTML, JavaScript, and much more' } },
  { id: 6, name: 'Directory Brute Force', helper: { content: 'gobuster dir -u http://TARGET_URL/ -w /usr/share/wordlists/dirb/common.txt -t 5\ngobuster dir -u http://TARGET_URL/ -w /usr/share/wordlists/dirb/common.txt -U jim@relia.com -P Castello1! (HTTP Basic Auth)\ngobuster dir -u http://TARGET_URL/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50' } },
  { id: 7, name: 'Run whatweb', helper: { content: 'whatweb TARGET_URL' } },
  { id: 8, name: 'Burp Suite', helper: { content: 'Analyze Traffic' } },
  { id: 9, name: 'XSS', helper: { content: 'Check for common XSS vulnerabilities' } },
  { id: 10, name: 'Directory Traversal', helper: { content: 'Check for directory traversal vulnerabilities' } },
  { id: 11, name: 'SQL Injection', helper: { content: 'Check for SQL injection vulnerabilities' } },
  { id: 12, name: 'OS Command Injection', helper: { content: 'Check for OS command injection vulnerabilities' } },
  { id: 13, name: 'File Inclusion', helper: { content: 'Check for file inclusion vulnerabilities' } },
  { id: 14, name: 'File Upload', helper: { content: 'Check for file upload vulnerabilities' } }
];

const WebAppExploit = () => {
  const [currentIP, setCurrentIP] = useState('');
  const [checklists, setChecklists] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showAllNotes, setShowAllNotes] = useState(false);

  // Load existing checklists when component mounts or IP changes
  useEffect(() => {
    if (currentIP.trim()) {
      loadChecklistForIP(currentIP.trim());
    }
  }, [currentIP]);

  const loadChecklistForIP = async (ip) => {
    try {
      setLoading(true);
      const response = await fetch(`${API_BASE_URL}/webapp/${ip}`);
      
      if (response.ok) {
        const data = await response.json();
        // Convert backend format to frontend format
        const checklistData = {};
        data.items.forEach(item => {
          checklistData[item.itemId] = {
            checked: item.checked,
            notes: item.notes
          };
        });
        setChecklists(prev => ({
          ...prev,
          [ip]: checklistData
        }));
      } else if (response.status === 404) {
        // No existing checklist, initialize empty one
        const emptyChecklist = {};
        checklistItems.forEach(item => {
          emptyChecklist[item.id] = {
            checked: false,
            notes: ''
          };
        });
        setChecklists(prev => ({
          ...prev,
          [ip]: emptyChecklist
        }));
      } else {
        throw new Error('Failed to load checklist');
      }
    } catch (error) {
      console.error('Error loading checklist:', error);
      setError('Failed to load checklist data');
    } finally {
      setLoading(false);
    }
  };

  const saveChecklistForIP = async (ip, checklistData) => {
    try {
      // Convert frontend format to backend format
      const items = Object.entries(checklistData).map(([itemId, data]) => ({
        itemId: parseInt(itemId),
        checked: data.checked,
        notes: data.notes
      }));

      const response = await fetch(`${API_BASE_URL}/webapp`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          target: ip,
          items: items
        }),
      });

      if (response.ok) {
        setSuccess('Checklist saved successfully!');
        setTimeout(() => setSuccess(''), 2000);
      } else {
        throw new Error('Failed to save checklist');
      }
    } catch (error) {
      console.error('Error saving checklist:', error);
      setError('Failed to save checklist');
      setTimeout(() => setError(''), 3000);
    }
  };

  const handleCheckboxChange = async (itemId, checked) => {
    if (!currentIP.trim()) {
      setError('Please enter an IP address first');
      setTimeout(() => setError(''), 3000);
      return;
    }

    const ip = currentIP.trim();
    const updatedChecklist = {
      ...checklists[ip],
      [itemId]: {
        ...checklists[ip]?.[itemId],
        checked: checked
      }
    };

    setChecklists(prev => ({
      ...prev,
      [ip]: updatedChecklist
    }));

    await saveChecklistForIP(ip, updatedChecklist);
  };

  const handleNotesChange = async (itemId, notes) => {
    if (!currentIP.trim()) {
      setError('Please enter an IP address first');
      setTimeout(() => setError(''), 3000);
      return;
    }

    const ip = currentIP.trim();
    const updatedChecklist = {
      ...checklists[ip],
      [itemId]: {
        ...checklists[ip]?.[itemId],
        notes: notes
      }
    };

    setChecklists(prev => ({
      ...prev,
      [ip]: updatedChecklist
    }));

    await saveChecklistForIP(ip, updatedChecklist);
  };

  const handleHelperChange = (itemId, content) => {
    // For now, helper content changes are not persisted
    // This is for template/reference content editing
    console.log(`Helper content updated for item ${itemId}:`, content);
  };

  const getProgress = () => {
    if (!currentIP.trim() || !checklists[currentIP.trim()]) return 0;
    
    const checklist = checklists[currentIP.trim()];
    const completed = Object.values(checklist).filter(item => item.checked).length;
    return Math.round((completed / checklistItems.length) * 100);
  };

  const getAllNotes = () => {
    if (!currentIP.trim() || !checklists[currentIP.trim()]) return [];
    
    const checklist = checklists[currentIP.trim()];
    const notes = [];
    
    checklistItems.forEach(item => {
      const itemData = checklist[item.id];
      if (itemData && itemData.notes && itemData.notes.trim()) {
        notes.push({
          id: item.id,
          name: item.name,
          notes: itemData.notes,
          checked: itemData.checked
        });
      }
    });
    
    return notes;
  };

  return (
    <div className="min-h-screen bg-white text-black p-4">
      {/* Back to Dashboard button */}
      <Link to="/" className="back-button">
        <ArrowLeft className="w-5 h-5" />
        Back to Dashboard
      </Link>

      <div className="webapp-page-container">
        <h1>Web Application Testing Checklist</h1>
        
        {error && <div className="error-message">{error}</div>}
        {success && <div className="success-message">{success}</div>}

        {/* IP Input Section */}
        <div className="ip-section">
          <h2>Target Information</h2>
          <input
            type="text"
            placeholder="Enter target IP address (e.g., 192.168.1.100)"
            value={currentIP}
            onChange={(e) => setCurrentIP(e.target.value)}
            className="ip-input-large"
          />
          {currentIP.trim() && (
            <div className="progress-bar-container">
              <div className="progress-bar">
                <div 
                  className="progress-fill" 
                  style={{ width: `${getProgress()}%` }}
                ></div>
              </div>
              <span className="progress-text">{getProgress()}% Complete</span>
            </div>
          )}
        </div>

        {/* Checklist Section */}
        {currentIP.trim() && (
          <div className="checklist-section">
            <div className="checklist-header-section">
              <h2>Testing Checklist for {currentIP.trim()}</h2>
              <button 
                onClick={() => setShowAllNotes(true)}
                className="view-notes-button"
                disabled={getAllNotes().length === 0}
              >
                View All Notes ({getAllNotes().length})
              </button>
            </div>
            {loading ? (
              <div className="loading-message">Loading checklist...</div>
            ) : (
              <div className="checklist-items">
                {checklistItems.map(item => {
                  const isChecked = checklists[currentIP.trim()]?.[item.id]?.checked || false;
                  const notes = checklists[currentIP.trim()]?.[item.id]?.notes || '';

                  return (
                    <ChecklistItem
                      key={item.id}
                      item={item}
                      isChecked={isChecked}
                      notes={notes}
                      onCheckboxChange={handleCheckboxChange}
                      onNotesChange={handleNotesChange}
                      onHelperChange={handleHelperChange}
                    />
                  );
                })}
              </div>
            )}
          </div>
        )}
      </div>

      {/* All Notes Modal */}
      {showAllNotes && (
        <div className="notes-modal-overlay" onClick={() => setShowAllNotes(false)}>
          <div className="notes-modal" onClick={(e) => e.stopPropagation()}>
            <div className="notes-modal-header">
              <h3>All Notes for {currentIP.trim()}</h3>
              <button 
                onClick={() => setShowAllNotes(false)}
                className="close-button"
              >
                ✕
              </button>
            </div>
            <div className="notes-modal-content">
              {getAllNotes().length === 0 ? (
                <p className="no-notes">No notes have been added yet.</p>
              ) : (
                <div className="all-notes-list">
                  {getAllNotes().map(note => (
                    <div key={note.id} className="note-item">
                      <div className="note-header">
                        <span className={`note-title ${note.checked ? 'completed' : 'pending'}`}>
                          {note.checked ? '✓' : '○'} {note.name}
                        </span>
                      </div>
                      <div className="note-content">
                        {note.notes}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default WebAppExploit;